{
  "language": "Solidity",
  "sources": {
    "contracts/WasteOperation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./WasteStorage.sol\";\n\ncontract WasteOperations is WasteStorage {\n    constructor() {\n        admin = msg.sender;\n    }\n\n    function addWastes(\n        uint256 _idWaste,\n        string memory _nameWaste,\n        string memory _typeOfWaste,\n        string memory _volumeofWaste,\n        string memory _wasteSources,\n        uint256 _amountOfWaste,\n        uint256 _cost,\n        string memory _people\n    ) public onlyAdmin {\n        require(WasteRecord[_idWaste].idWaste == 0, \"Data Limbah dengan ID tersebut sudah ada\");\n        require(bytes(_nameWaste).length > 0, \"Nama Limbah Tidak Boleh Kosong\");\n        require(bytes(_typeOfWaste).length > 0, \"Jenis Limbah Tidak Boleh Kosong\");\n        require(bytes(_volumeofWaste).length > 0, \"Berat Limbah Tidak Boleh Kosong\");\n        require(bytes(_wasteSources).length > 0, \"Sumber Limbah Tidak Boleh Kosong\");\n        require(_amountOfWaste > 0, \"Jumlah Limbah Tidak Boleh Kosong\");\n        require(_cost > 0, \"Biaya Pengelolaan Limbah Tidak Boleh Kosong\");\n        require(bytes(_people).length > 0, \"Pihak Yang Mengelola Limbah Tidak Boleh Kosong\");\n        WasteRecord[_idWaste] = Waste(\n            _idWaste,\n            _nameWaste,\n            _typeOfWaste,\n            _volumeofWaste,\n            _wasteSources,\n            _amountOfWaste,\n            _cost,\n            _people\n        );\n        emit addWaste(\n            _idWaste,\n            _nameWaste,\n            _typeOfWaste,\n            _volumeofWaste,\n            _wasteSources,\n            _amountOfWaste,\n            _cost,\n            _people\n        );\n    }\n\n    function editWastes(\n        uint256 _idWaste,\n        string memory _nameWaste,\n        string memory _typeOfWaste,\n        string memory _volumeofWaste,\n        string memory _wasteSources,\n        uint256 _amountOfWaste,\n        uint256 _cost,\n        string memory _people\n    ) public onlyAdmin {\n        Waste storage waste = WasteRecord[_idWaste];\n        require(bytes(_nameWaste).length > 0, \"Nama Limbah Tidak Boleh Kosong\");\n        require(bytes(_typeOfWaste).length > 0, \"Jenis Limbah Tidak Boleh Kosong\");\n        require(bytes(_volumeofWaste).length > 0, \"Berat Limbah Tidak Boleh Kosong\");\n        require(bytes(_wasteSources).length > 0, \"Sumber Limbah Tidak Boleh Kosong\");\n        require(_amountOfWaste > 0, \"Jumlah Limbah Tidak Boleh Kosong\");\n        require(_cost > 0, \"Biaya Pengelolaan Limbah Tidak Boleh Kosong\");\n        require(bytes(_people).length > 0, \"Pihak Yang Mengelola Limbah Tidak Boleh Kosong\");\n        waste.nameWaste = _nameWaste;\n        waste.typeOfWaste = _typeOfWaste;\n        waste.volumeofWaste = _volumeofWaste;\n        waste.wasteSources = _wasteSources;\n        waste.amountOfWaste = _amountOfWaste;\n        waste.cost = _cost;\n        waste.people = _people;\n\n        emit updateWaste(\n            _idWaste,\n            _nameWaste,\n            _typeOfWaste,\n            _volumeofWaste,\n            _wasteSources,\n            _amountOfWaste,\n            _cost,\n            _people\n        );\n    }\n    function deleteWastes(uint256 _idWaste) public onlyAdmin {\n        require(WasteRecord[_idWaste].idWaste != 0, \"Data Limbah dengan ID tersebut tidak ada\");\n        require(_idWaste > 0, \"Id Limbah Harus Diisi!\");\n        delete WasteRecord[_idWaste];\n        emit deleteWaste(_idWaste);\n    }\n    function getWastesByID(uint256 _idWaste) public view returns (Waste memory) {\n        require(WasteRecord[_idWaste].idWaste != 0, \"Data Limbah dengan ID tersebut tidak ada\");\n        require(_idWaste > 0, \"Id Limbah Harus Diisi!\");\n        return WasteRecord[_idWaste];\n    }\n}\n"
    },
    "contracts/WasteProcessingSystem.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./WasteStorage.sol\";\nimport \"./WasteOperation.sol\";\n\ncontract WasteProcessingSystem is WasteStorage, WasteOperations {\n    constructor() WasteOperations() {\n    }\n}\n"
    },
    "contracts/WasteStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ncontract WasteStorage {\n    address public admin;\n\n    struct Waste {\n        uint256 idWaste;\n        string nameWaste;\n        string typeOfWaste;\n        string volumeofWaste;\n        string wasteSources;\n        uint256 amountOfWaste;\n        uint256 cost;\n        string people;\n    }\n\n    mapping(uint256 => Waste) public WasteRecord;\n\n    event addWaste(\n        uint256 idWaste,\n        string nameWaste,\n        string typeOfWaste,\n        string volumeofWaste,\n        string wasteSources,\n        uint256 amountOfWaste,\n        uint256 cost,\n        string people\n    );\n\n    event updateWaste(\n        uint256 idWaste,\n        string nameWaste,\n        string typeOfWaste,\n        string volumeofWaste,\n        string wasteSources,\n        uint256 amountOfWaste,\n        uint256 cost,\n        string people\n    );\n\n    event deleteWaste(uint256 idWaste);\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Hanya admin yang boleh melakukan\");\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}